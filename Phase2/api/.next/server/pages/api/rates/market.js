"use strict";(()=>{var e={};e.id=268,e.ids=[268],e.modules={1495:e=>{e.exports=require("ioredis")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},4580:e=>{e.exports=require("node-cache")},298:e=>{e.exports=require("rate-limiter-flexible")},1467:e=>{e.exports=import("@vercel/kv")},6555:e=>{e.exports=import("uuid")},1990:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.r(t),a.d(t,{config:()=>u,default:()=>l,routeModule:()=>g});var s=a(1802),i=a(7153),o=a(6249),n=a(204),c=e([n]);n=(c.then?(await c)():c)[0];let l=(0,o.l)(n,"default"),u=(0,o.l)(n,"config"),g=new s.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/rates/market",pathname:"/api/rates/market",bundlePath:"",filename:""},userland:n});r()}catch(e){r(e)}})},1753:(e,t,a)=>{a.d(t,{Ju:()=>s});class r{constructor(){this.USAGE_WINDOW=864e5,this.keyUsageCache=new Map}static getInstance(){return r.instance||(r.instance=new r),r.instance}getApiKey(e){let t=this.getEnvironmentKey(e);return process.env[t]||null}hasApiKey(e){return!!this.getApiKey(e)}getEnvironmentKey(e){return({polygon:"POLYGON_API_KEY",twelvedata:"TWELVEDATA_API_KEY",coinbase:"COINBASE_API_KEY",coinbase_secret:"COINBASE_API_SECRET",coinbase_passphrase:"COINBASE_API_PASSPHRASE",openweather:"OPENWEATHER_API_KEY",fxapi:"FXAPI_KEY",alpaca:"ALPACA_API_KEY",alpaca_secret:"ALPACA_SECRET_KEY"})[e]||`${e.toUpperCase()}_API_KEY`}getAllApiKeyInfo(){return["polygon","twelvedata","coinbase","openweather","fxapi","alpaca"].map(e=>this.getApiKeyInfo(e))}getApiKeyInfo(e){let t=this.hasApiKey(e),a=this.getUsageStats(e);return{name:e,provider:e,hasKey:t,lastUsed:a.lastUsed,requestsToday:a.requestsToday,rateLimit:this.getRateLimit(e),status:this.getKeyStatus(e)}}recordUsage(e){let t=Date.now(),a=this.keyUsageCache.get(e)||{count:0,lastReset:t};t-a.lastReset>this.USAGE_WINDOW&&(a.count=0,a.lastReset=t),a.count++,this.keyUsageCache.set(e,a)}getUsageStats(e){let t=this.keyUsageCache.get(e);return{lastUsed:t?t.lastReset:void 0,requestsToday:t?t.count:0}}getRateLimit(e){return({polygon:5,twelvedata:8,coinbase:10,openweather:60,fxapi:100,alpaca:200})[e]||60}getKeyStatus(e){let t=this.hasApiKey(e);return t?"active":"inactive"}async validateApiKey(e){let t=this.getApiKey(e);if(!t)return!1;try{switch(e){case"polygon":return await this.validatePolygonKey(t);case"twelvedata":return await this.validateTwelveDataKey(t);case"coinbase":return await this.validateCoinbaseKey(t);case"openweather":return await this.validateOpenWeatherKey(t);default:return!0}}catch(t){return console.error(`[ApiKeys] Error validating ${e} key:`,t),!1}}async validatePolygonKey(e){let t=await fetch(`https://api.polygon.io/v2/aggs/ticker/AAPL/prev?adjusted=true&apiKey=${e}`,{method:"GET"});return t.ok}async validateTwelveDataKey(e){let t=await fetch(`https://api.twelvedata.com/time_series?symbol=AAPL&interval=1day&outputsize=1&apikey=${e}`,{method:"GET"}),a=await t.json();return t.ok&&!a.message?.includes("Invalid API key")}async validateCoinbaseKey(e){let t=await fetch("https://api.exchange.coinbase.com/products",{headers:{"CB-ACCESS-KEY":e}});return t.ok}async validateOpenWeatherKey(e){let t=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=Toronto&appid=${e}`,{method:"GET"});return t.ok}getHeaders(e){let t=this.getApiKey(e);if(!t)return{};switch(e){case"polygon":case"twelvedata":case"openweather":return{};case"coinbase":return{"CB-ACCESS-KEY":t,"CB-ACCESS-SIGN":"","CB-ACCESS-TIMESTAMP":Date.now().toString(),"CB-ACCESS-PASSPHRASE":this.getApiKey("coinbase_passphrase")||""};default:return{Authorization:`Bearer ${t}`,"X-API-Key":t}}}buildUrlWithKey(e,t,a){let r=this.getApiKey(e);if(!r)return t;let s=new URL(t);switch(e){case"polygon":s.searchParams.set("apiKey",r);break;case"twelvedata":case"alpaca":s.searchParams.set("apikey",r);break;case"openweather":s.searchParams.set("appid",r)}return a&&Object.entries(a).forEach(([e,t])=>{s.searchParams.set(e,t)}),s.toString()}needsRotation(e){let t=this.getUsageStats(e),a=this.getRateLimit(e);return t.requestsToday>.8*a}getUsageReport(){let e={};return this.getAllApiKeyInfo().forEach(t=>{e[t.provider]={hasKey:t.hasKey,status:t.status,requestsToday:t.requestsToday,rateLimit:t.rateLimit,needsRotation:this.needsRotation(t.provider)}}),e}}let s=r.getInstance()},9017:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.d(t,{it:()=>c});var s=a(1753),i=a(936),o=e([i]);i=(o.then?(await o)():o)[0];class n{constructor(){this.providers=new Map,this.isRunning=!1,this.lastAggregation=0,this.initializeProviders()}static getInstance(){return n.instance||(n.instance=new n),n.instance}initializeProviders(){["polygon","twelvedata","coinbase","openweather","fxapi"].forEach(e=>{this.providers.set(e,{name:e,isActive:s.Ju.hasApiKey(e),lastUpdate:0,errorCount:0,avgResponseTime:0})})}start(){if(this.isRunning){console.log("[DataAggregator] Already running");return}console.log("[DataAggregator] Starting data aggregator..."),this.updateInterval=setInterval(()=>{this.checkProviderHealth().catch(e=>{console.error("[DataAggregator] Health check error:",e)})},6e4),this.checkProviderHealth(),this.isRunning=!0,console.log("[DataAggregator] Started successfully")}stop(){this.isRunning&&(console.log("[DataAggregator] Stopping data aggregator..."),this.updateInterval&&(clearInterval(this.updateInterval),this.updateInterval=void 0),this.isRunning=!1,console.log("[DataAggregator] Stopped"))}async checkProviderHealth(){for(let[e,t]of(console.log("[DataAggregator] Checking provider health..."),this.providers))try{let a=await s.Ju.validateApiKey(e),r={...t,isActive:a&&s.Ju.hasApiKey(e),lastUpdate:Date.now()};this.providers.set(e,r)}catch(r){console.error(`[DataAggregator] Error checking ${e}:`,r);let a={...t,isActive:!1,errorCount:t.errorCount+1,lastUpdate:Date.now()};this.providers.set(e,a)}}async aggregateMarketData(e,t="forex"){let a=Date.now(),r=[],s=[];try{for(let[a,i]of this.providers)if(i.isActive)try{let o=Date.now(),n=await this.fetchFromProvider(a,e,t),c=Date.now()-o;n&&n.length>0&&(r.push(...n),s.push({...i,avgResponseTime:c,lastUpdate:Date.now()}),this.providers.set(a,{...i,avgResponseTime:(i.avgResponseTime+c)/2,lastUpdate:Date.now()}))}catch(t){console.error(`[DataAggregator] Error fetching from ${a}:`,t);let e={...i,errorCount:i.errorCount+1,lastUpdate:Date.now()};this.providers.set(a,e)}let i=this.mergeAndDeduplicateData(r,e),o=this.calculateDataQuality(i,s),n=i.length/e.length*100;this.lastAggregation=Date.now();let c={symbols:e,providers:s,lastAggregation:this.lastAggregation,dataQuality:o,completeness:n};return await this.cacheAggregatedData(e,i,c),console.log(`[DataAggregator] Aggregated ${i.length}/${e.length} symbols in ${Date.now()-a}ms`),c}catch(e){throw console.error("[DataAggregator] Aggregation error:",e),e}}async fetchFromProvider(e,t,a){let r=0;for(;r<3;)try{switch(e){case"polygon":return await this.fetchPolygonData(t,a);case"twelvedata":return await this.fetchTwelveDataData(t,a);case"coinbase":return await this.fetchCoinbaseData(t,a);case"fxapi":return await this.fetchFxApiData(t,a);default:return[]}}catch(t){if(r++,console.warn(`[DataAggregator] Attempt ${r} failed for ${e}:`,t),r>=3)throw t;await new Promise(e=>setTimeout(e,1e3*r))}return[]}async fetchPolygonData(e,t){let a=[];for(let r of e)try{let e="";switch(t){case"forex":e=s.Ju.buildUrlWithKey("polygon",`https://api.polygon.io/v1/last/currencies/${r}`,{adjusted:"true"});break;case"crypto":e=s.Ju.buildUrlWithKey("polygon",`https://api.polygon.io/v1/last/crypto/${r}/USD`,{adjusted:"true"});break;default:continue}let i=await fetch(e);if(!i.ok){console.warn(`[DataAggregator] Polygon API error for ${r}: ${i.status}`);continue}let o=await i.json();if(o.results&&o.results.length>0){let e=o.results[0];a.push({symbol:r,price:e.price||e.last||0,timestamp:Date.now(),source:"polygon",bid:e.bid,ask:e.ask})}await new Promise(e=>setTimeout(e,200))}catch(e){console.error(`[DataAggregator] Polygon error for ${r}:`,e)}return s.Ju.recordUsage("polygon"),a}async fetchTwelveDataData(e,t){try{let a=e.join(","),r="";switch(t){case"forex":r="exchange_rate";break;case"crypto":r="cryptocurrency_quote";break;case"commodities":case"indices":r="quote";break;default:return[]}let i=s.Ju.buildUrlWithKey("twelvedata",`https://api.twelvedata.com/${r}`,{symbol:a,outputsize:"1"}),o=await fetch(i);if(!o.ok)return console.warn(`[DataAggregator] TwelveData API error: ${o.status}`),[];let n=await o.json(),c=[];return n.symbol&&n.price&&c.push({symbol:n.symbol,price:parseFloat(n.price),timestamp:Date.now(),source:"twelvedata",change:n.change?parseFloat(n.change):void 0,changePercent:n.percent_change?parseFloat(n.percent_change):void 0}),n.data&&Array.isArray(n.data)&&n.data.forEach(e=>{e.symbol&&e.price&&c.push({symbol:e.symbol,price:parseFloat(e.price),timestamp:Date.now(),source:"twelvedata",change:e.change?parseFloat(e.change):void 0,changePercent:e.percent_change?parseFloat(e.percent_change):void 0})}),s.Ju.recordUsage("twelvedata"),c}catch(e){return console.error("[DataAggregator] TwelveData error:",e),[]}}async fetchCoinbaseData(e,t){if("crypto"!==t)return[];let a=[];for(let t of e)try{let e=t.includes("-")?t:`${t}-USD`,r=await fetch(`https://api.exchange.coinbase.com/products/${e}/ticker`);if(!r.ok)continue;let s=await r.json();a.push({symbol:t,price:parseFloat(s.price),timestamp:Date.now(),source:"coinbase",bid:parseFloat(s.bid),ask:parseFloat(s.ask),volume:parseFloat(s.volume)}),await new Promise(e=>setTimeout(e,100))}catch(e){console.error(`[DataAggregator] Coinbase error for ${t}:`,e)}return s.Ju.recordUsage("coinbase"),a}async fetchFxApiData(e,t){if("forex"!==t)return[];try{let t=s.Ju.buildUrlWithKey("fxapi","https://fxapi.fxempire.com/v1/currencies"),a=await fetch(t);if(!a.ok)return[];let r=await a.json(),i=[];return e.forEach(e=>{let t=r[e];t&&i.push({symbol:e,price:t,timestamp:Date.now(),source:"fxapi"})}),s.Ju.recordUsage("fxapi"),i}catch(e){return console.error("[DataAggregator] FX API error:",e),[]}}mergeAndDeduplicateData(e,t){let a=new Map;return e.forEach(e=>{let t=a.get(e.symbol);if(t){let r=["polygon","twelvedata","coinbase","fxapi"],s=r.indexOf(t.source),i=r.indexOf(e.source);(i<s||i===s&&e.timestamp>t.timestamp)&&a.set(e.symbol,e)}else a.set(e.symbol,e)}),Array.from(a.values())}calculateDataQuality(e,t){if(0===e.length||0===t.length)return 0;let a=t.length/this.providers.size,r=t.reduce((e,t)=>e+t.errorCount,0)/t.length;return Math.min(100,Math.max(0,(.4*a+.6*Math.max(0,1-r/10))*100))}async cacheAggregatedData(e,t,a){try{let r=`aggregated:${e.join(",")}`,s={data:t,aggregation:a,cachedAt:Date.now()};await i.Fs.setex(r,300,JSON.stringify(s))}catch(e){console.error("[DataAggregator] Cache error:",e)}}async getForexRates(e){await this.aggregateMarketData(e,"forex");let t=await i.Fs.get(`aggregated:${e.join(",")}`);if(t){let{data:e}=JSON.parse(t);return e.map(e=>({pair:e.symbol,rate:e.price,timestamp:e.timestamp,source:e.source,bid:e.bid,ask:e.ask,spread:e.bid&&e.ask?e.ask-e.bid:void 0}))}return[]}async getCryptoPrices(e){await this.aggregateMarketData(e,"crypto");let t=await i.Fs.get(`aggregated:${e.join(",")}`);if(t){let{data:e}=JSON.parse(t);return e.map(e=>({symbol:e.symbol,price:e.price,timestamp:e.timestamp,source:e.source,volume24h:e.volume,change24h:e.change,changePercent24h:e.changePercent}))}return[]}getProviderStatus(){return Array.from(this.providers.values())}getStats(){return{isRunning:this.isRunning,lastAggregation:this.lastAggregation,activeProviders:Array.from(this.providers.values()).filter(e=>e.isActive).length,totalProviders:this.providers.size,avgResponseTime:Array.from(this.providers.values()).reduce((e,t)=>e+t.avgResponseTime,0)/this.providers.size,totalErrors:Array.from(this.providers.values()).reduce((e,t)=>e+t.errorCount,0)}}}let c=n.getInstance();r()}catch(e){r(e)}})},7234:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.d(t,{qQ:()=>c});var s=a(298),i=a(8008),o=e([i]);i=(o.then?(await o)():o)[0];class n{constructor(){this.limiters=new Map,this.isRedisAvailable=!!(process.env.UPSTASH_REDIS_REST_URL&&process.env.UPSTASH_REDIS_REST_TOKEN),this.initializeDefaultLimiters()}static getInstance(){return n.instance||(n.instance=new n),n.instance}initializeDefaultLimiters(){this.createLimiter("api",{windowMs:6e4,maxRequests:parseInt(process.env.RATE_LIMIT_REQUESTS||"1000")}),this.createLimiter("data",{windowMs:6e4,maxRequests:500}),this.createLimiter("config",{windowMs:6e4,maxRequests:100}),this.createLimiter("health",{windowMs:6e4,maxRequests:60}),this.createLimiter("auth",{windowMs:3e5,maxRequests:20}),this.createLimiter("ws",{windowMs:3e5,maxRequests:10}),this.createLimiter("rates",{windowMs:6e4,maxRequests:200}),this.createLimiter("market_data",{windowMs:6e4,maxRequests:1e3})}createLimiter(e,t){let a;let r={keyPrefix:`rl_${e}`,points:t.maxRequests,duration:Math.floor(t.windowMs/1e3),blockDuration:Math.floor(t.windowMs/1e3),skipSuccessfulRequests:t.skipSuccessfulRequests||!1,skipFailedRequests:t.skipFailedRequests||!1};if(this.isRedisAvailable)try{a=new s.RateLimiterRedis({...r,storeClient:this.getRedisClient()})}catch(t){console.warn(`[RateLimit] Redis unavailable for ${e}, falling back to memory:`,t),a=new s.RateLimiterMemory(r)}else a=new s.RateLimiterMemory(r);this.limiters.set(e,a)}getRedisClient(){let e=a(1495);if(process.env.KV_URL)return new e(process.env.KV_URL);if(process.env.UPSTASH_REDIS_REST_URL)return new e({host:new URL(process.env.UPSTASH_REDIS_REST_URL).hostname,port:parseInt(new URL(process.env.UPSTASH_REDIS_REST_URL).port)||6379,password:process.env.UPSTASH_REDIS_REST_TOKEN,tls:{}});throw Error("No Redis configuration found")}async checkRateLimit(e,t="api"){let a=this.limiters.get(t);if(!a)throw Error(`Rate limiter not found for category: ${t}`);let r=i.t7.getRateLimitKey(e,t);try{let e=await a.consume(r);return{limit:a.points,remaining:e.remainingPoints||0,reset:Date.now()+(e.msBeforeNext||0)}}catch(e){return{limit:a.points,remaining:0,reset:Date.now()+(e.msBeforeNext||0),retryAfter:Math.round((e.msBeforeNext||0)/1e3)}}}async applyRateLimit(e,t,a="api"){try{let r=await this.checkRateLimit(e,a);if(t.setHeader("X-RateLimit-Limit",r.limit.toString()),t.setHeader("X-RateLimit-Remaining",r.remaining.toString()),t.setHeader("X-RateLimit-Reset",r.reset.toString()),r.retryAfter)return t.setHeader("Retry-After",r.retryAfter.toString()),t.status(429).json({success:!1,error:"Rate limit exceeded",code:"RATE_LIMIT_EXCEEDED",retryAfter:r.retryAfter,timestamp:Date.now(),requestId:i.t7.generateRequestId()}),!1;return!0}catch(e){return console.error("[RateLimit] Error applying rate limit:",e),!0}}async getRateLimitStatus(e,t="api"){let a=this.limiters.get(t);if(!a)throw Error(`Rate limiter not found for category: ${t}`);let r=i.t7.getRateLimitKey(e,t);try{let e=await a.get(r);return{limit:a.points,remaining:e?e.remainingPoints:a.points,reset:Date.now()+(e?e.msBeforeNext:0)}}catch(e){return console.error("[RateLimit] Error getting status:",e),{limit:a.points,remaining:a.points,reset:Date.now()+6e4}}}async resetRateLimit(e,t="api"){let a=this.limiters.get(t);if(!a)throw Error(`Rate limiter not found for category: ${t}`);let r=i.t7.getRateLimitKey(e,t);await a.delete(r)}createCustomLimiter(e,t){this.createLimiter(e,t)}getLimiters(){return Array.from(this.limiters.keys())}middleware(e="api"){return async(t,a,r)=>{let s=await this.applyRateLimit(t,a,e);return s&&r&&r(),s}}async checkIPRateLimit(e,t){let a=i.t7.getClientIP(e),r=`ip_rl:${a}`,o=new s.RateLimiterMemory({keyPrefix:"ip_rate_limit",points:t.maxRequests,duration:Math.floor(t.windowMs/1e3),blockDuration:Math.floor(t.windowMs/1e3)});try{let e=await o.consume(r);return{limit:t.maxRequests,remaining:e.remainingPoints||0,reset:Date.now()+(e.msBeforeNext||0)}}catch(e){return{limit:t.maxRequests,remaining:0,reset:Date.now()+(e.msBeforeNext||0),retryAfter:Math.round((e.msBeforeNext||0)/1e3)}}}}let c=n.getInstance();r()}catch(e){r(e)}})},204:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.r(t),a.d(t,{config:()=>l,default:()=>c});var s=a(8008),i=a(7234),o=a(9017),n=e([s,i,o]);async function c(e,t){let a=s.t7.createSecurityContext(e);s.t7.setSecurityHeaders(t);let r=s.t7.getCorsHeaders(e.headers.origin);if(Object.entries(r).forEach(([e,a])=>{t.setHeader(e,a)}),"OPTIONS"===e.method){t.status(200).end();return}if("GET"!==e.method){t.status(405).json({success:!1,error:"Method not allowed",timestamp:Date.now(),requestId:a.requestId});return}try{let r=await i.qQ.applyRateLimit(e,t,"market_data");if(!r)return;if(!s.t7.validateApiKey(e)){t.status(401).json({success:!1,error:"Invalid or missing API key",timestamp:Date.now(),requestId:a.requestId});return}let{symbols:n,type:c="forex",provider:l}=s.t7.sanitizeInput(e.query);if(!n){t.status(400).json({success:!1,error:"Symbols parameter is required",timestamp:Date.now(),requestId:a.requestId});return}let u=Array.isArray(n)?n:n.split(","),g=u.filter(e=>/^[A-Z0-9\/\-]+$/.test(e));if(0===g.length){t.status(400).json({success:!1,error:"No valid symbols provided",timestamp:Date.now(),requestId:a.requestId});return}let p=["forex","crypto","commodities","indices"];if(!p.includes(c)){t.status(400).json({success:!1,error:`Invalid data type. Must be one of: ${p.join(", ")}`,timestamp:Date.now(),requestId:a.requestId});return}o.it.getStats().isRunning||o.it.start();let h=[];try{switch(c){case"forex":let e=await o.it.getForexRates(g);h=e.map(e=>({symbol:e.pair,price:e.rate,timestamp:e.timestamp,bid:e.bid,ask:e.ask,source:e.source}));break;case"crypto":let r=await o.it.getCryptoPrices(g);h=r.map(e=>({symbol:e.symbol,price:e.price,timestamp:e.timestamp,volume:e.volume24h,change24h:e.change24h,changePercent24h:e.changePercent24h,source:e.source}));break;case"commodities":case"indices":let s=await o.it.getForexRates(g);h=s.map(e=>({symbol:e.pair,price:e.rate,timestamp:e.timestamp,source:e.source}));break;default:throw Error(`Unsupported data type: ${c}`)}l&&(h=h.filter(e=>e.source===l));let i=o.it.getStats(),n=o.it.getProviderStatus();t.status(200).json({success:!0,data:h,metadata:{dataType:c,symbolsRequested:g.length,symbolsReturned:h.length,completeness:h.length/g.length*100,aggregatorStats:i,providerStatus:n.filter(e=>e.isActive),lastUpdate:Math.max(...h.map(e=>e.timestamp),0)},timestamp:Date.now(),requestId:a.requestId})}catch(e){console.error("[MarketRates] Data aggregation error:",e),t.status(503).json({success:!1,error:"Market data temporarily unavailable",details:e instanceof Error?e.message:"Unknown error",timestamp:Date.now(),requestId:a.requestId})}}catch(e){console.error("[MarketRates] API error:",e),t.status(500).json({success:!1,error:"Internal server error",timestamp:Date.now(),requestId:a.requestId})}}[s,i,o]=n.then?(await n)():n;let l={api:{responseLimit:"8mb"}};r()}catch(e){r(e)}})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[924],()=>a(1990));module.exports=r})();