"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/rates/current";
exports.ids = ["pages/api/rates/current"];
exports.modules = {

/***/ "ioredis":
/*!**************************!*\
  !*** external "ioredis" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("ioredis");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "node-cache":
/*!*****************************!*\
  !*** external "node-cache" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node-cache");

/***/ }),

/***/ "rate-limiter-flexible":
/*!****************************************!*\
  !*** external "rate-limiter-flexible" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("rate-limiter-flexible");

/***/ }),

/***/ "@vercel/kv":
/*!*****************************!*\
  !*** external "@vercel/kv" ***!
  \*****************************/
/***/ ((module) => {

module.exports = import("@vercel/kv");;

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

module.exports = import("uuid");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Frates%2Fcurrent&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Frates%2Fcurrent.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Frates%2Fcurrent&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Frates%2Fcurrent.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_rates_current_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/rates/current.ts */ \"(api)/./pages/api/rates/current.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_rates_current_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_rates_current_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_rates_current_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_rates_current_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/rates/current\",\n        pathname: \"/api/rates/current\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_rates_current_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnJhdGVzJTJGY3VycmVudCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTJGYXBpJTJGcmF0ZXMlMkZjdXJyZW50LnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ3lEO0FBQ3pEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyx3REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsd0RBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELHFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGxlYXBlcmZ4L2FwaS8/NjcyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL3JhdGVzL2N1cnJlbnQudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9yYXRlcy9jdXJyZW50XCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcmF0ZXMvY3VycmVudFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Frates%2Fcurrent&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Frates%2Fcurrent.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/database.ts":
/*!*************************!*\
  !*** ./lib/database.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseService: () => (/* binding */ DatabaseService),\n/* harmony export */   database: () => (/* binding */ database),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _vercel_kv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vercel/kv */ \"@vercel/kv\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-cache */ \"node-cache\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_cache__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_vercel_kv__WEBPACK_IMPORTED_MODULE_0__]);\n_vercel_kv__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/**\n * Database Service for LeaperFX Backend\n * Supports Vercel KV, Upstash Redis, and fallback to memory storage\n */ \n\nclass DatabaseService {\n    constructor(){\n        this.memoryCache = new (node_cache__WEBPACK_IMPORTED_MODULE_1___default())({\n            stdTTL: 300,\n            checkperiod: 60,\n            useClones: false\n        });\n        this.isKVAvailable = !!(process.env.KV_URL || process.env.KV_REST_API_URL);\n        this.isRedisAvailable = !!(process.env.UPSTASH_REDIS_REST_URL && process.env.UPSTASH_REDIS_REST_TOKEN);\n        console.log(\"[Database] KV Available:\", this.isKVAvailable);\n        console.log(\"[Database] Redis Available:\", this.isRedisAvailable);\n    }\n    static getInstance() {\n        if (!DatabaseService.instance) {\n            DatabaseService.instance = new DatabaseService();\n        }\n        return DatabaseService.instance;\n    }\n    /**\n   * Get a value from storage\n   */ async get(key) {\n        try {\n            // Try Vercel KV first\n            if (this.isKVAvailable) {\n                try {\n                    const value = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.get(key);\n                    if (value !== null) {\n                        return value;\n                    }\n                } catch (error) {\n                    console.warn(\"[Database] KV get error:\", error);\n                }\n            }\n            // Try Redis second\n            if (this.isRedisAvailable) {\n                try {\n                    const Redis = __webpack_require__(/*! ioredis */ \"ioredis\");\n                    const redis = new Redis({\n                        host: new URL(process.env.UPSTASH_REDIS_REST_URL).hostname,\n                        port: parseInt(new URL(process.env.UPSTASH_REDIS_REST_URL).port) || 6379,\n                        password: process.env.UPSTASH_REDIS_REST_TOKEN,\n                        tls: {}\n                    });\n                    const value = await redis.get(key);\n                    await redis.quit();\n                    if (value) {\n                        return JSON.parse(value);\n                    }\n                } catch (error) {\n                    console.warn(\"[Database] Redis get error:\", error);\n                }\n            }\n            // Fallback to memory cache\n            return this.memoryCache.get(key) || null;\n        } catch (error) {\n            console.error(\"[Database] Get error:\", error);\n            return null;\n        }\n    }\n    /**\n   * Set a value in storage\n   */ async set(key, value, ttl) {\n        try {\n            // Try Vercel KV first\n            if (this.isKVAvailable) {\n                try {\n                    if (ttl) {\n                        await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.setex(key, ttl, value);\n                    } else {\n                        await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.set(key, value);\n                    }\n                    return true;\n                } catch (error) {\n                    console.warn(\"[Database] KV set error:\", error);\n                }\n            }\n            // Try Redis second\n            if (this.isRedisAvailable) {\n                try {\n                    const Redis = __webpack_require__(/*! ioredis */ \"ioredis\");\n                    const redis = new Redis({\n                        host: new URL(process.env.UPSTASH_REDIS_REST_URL).hostname,\n                        port: parseInt(new URL(process.env.UPSTASH_REDIS_REST_URL).port) || 6379,\n                        password: process.env.UPSTASH_REDIS_REST_TOKEN,\n                        tls: {}\n                    });\n                    const serialized = JSON.stringify(value);\n                    if (ttl) {\n                        await redis.setex(key, ttl, serialized);\n                    } else {\n                        await redis.set(key, serialized);\n                    }\n                    await redis.quit();\n                    return true;\n                } catch (error) {\n                    console.warn(\"[Database] Redis set error:\", error);\n                }\n            }\n            // Fallback to memory cache\n            if (ttl) {\n                this.memoryCache.set(key, value, ttl);\n            } else {\n                this.memoryCache.set(key, value);\n            }\n            return true;\n        } catch (error) {\n            console.error(\"[Database] Set error:\", error);\n            return false;\n        }\n    }\n    /**\n   * Delete a value from storage\n   */ async delete(key) {\n        try {\n            let deleted = false;\n            // Try Vercel KV first\n            if (this.isKVAvailable) {\n                try {\n                    await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.del(key);\n                    deleted = true;\n                } catch (error) {\n                    console.warn(\"[Database] KV delete error:\", error);\n                }\n            }\n            // Try Redis second\n            if (this.isRedisAvailable) {\n                try {\n                    const Redis = __webpack_require__(/*! ioredis */ \"ioredis\");\n                    const redis = new Redis({\n                        host: new URL(process.env.UPSTASH_REDIS_REST_URL).hostname,\n                        port: parseInt(new URL(process.env.UPSTASH_REDIS_REST_URL).port) || 6379,\n                        password: process.env.UPSTASH_REDIS_REST_TOKEN,\n                        tls: {}\n                    });\n                    await redis.del(key);\n                    await redis.quit();\n                    deleted = true;\n                } catch (error) {\n                    console.warn(\"[Database] Redis delete error:\", error);\n                }\n            }\n            // Always delete from memory cache\n            this.memoryCache.del(key);\n            return true;\n        } catch (error) {\n            console.error(\"[Database] Delete error:\", error);\n            return false;\n        }\n    }\n    /**\n   * Check if key exists\n   */ async exists(key) {\n        try {\n            // Check KV first\n            if (this.isKVAvailable) {\n                try {\n                    const value = await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.get(key);\n                    if (value !== null) return true;\n                } catch (error) {\n                    console.warn(\"[Database] KV exists error:\", error);\n                }\n            }\n            // Check Redis\n            if (this.isRedisAvailable) {\n                try {\n                    const Redis = __webpack_require__(/*! ioredis */ \"ioredis\");\n                    const redis = new Redis({\n                        host: new URL(process.env.UPSTASH_REDIS_REST_URL).hostname,\n                        port: parseInt(new URL(process.env.UPSTASH_REDIS_REST_URL).port) || 6379,\n                        password: process.env.UPSTASH_REDIS_REST_TOKEN,\n                        tls: {}\n                    });\n                    const exists = await redis.exists(key);\n                    await redis.quit();\n                    if (exists) return true;\n                } catch (error) {\n                    console.warn(\"[Database] Redis exists error:\", error);\n                }\n            }\n            // Check memory cache\n            return this.memoryCache.has(key);\n        } catch (error) {\n            console.error(\"[Database] Exists error:\", error);\n            return false;\n        }\n    }\n    /**\n   * Get all keys matching a pattern\n   */ async keys(pattern) {\n        try {\n            const keys = new Set();\n            // Get from KV (limited pattern support)\n            if (this.isKVAvailable) {\n                try {\n                // KV doesn't support pattern matching, so we'll skip this for now\n                // In a real implementation, you'd maintain an index of keys\n                } catch (error) {\n                    console.warn(\"[Database] KV keys error:\", error);\n                }\n            }\n            // Get from Redis\n            if (this.isRedisAvailable) {\n                try {\n                    const Redis = __webpack_require__(/*! ioredis */ \"ioredis\");\n                    const redis = new Redis({\n                        host: new URL(process.env.UPSTASH_REDIS_REST_URL).hostname,\n                        port: parseInt(new URL(process.env.UPSTASH_REDIS_REST_URL).port) || 6379,\n                        password: process.env.UPSTASH_REDIS_REST_TOKEN,\n                        tls: {}\n                    });\n                    const redisKeys = await redis.keys(pattern);\n                    redisKeys.forEach((key)=>keys.add(key));\n                    await redis.quit();\n                } catch (error) {\n                    console.warn(\"[Database] Redis keys error:\", error);\n                }\n            }\n            // Get from memory cache\n            const memoryKeys = this.memoryCache.keys();\n            const regex = new RegExp(pattern.replace(/\\*/g, \".*\").replace(/\\?/g, \".\"));\n            memoryKeys.forEach((key)=>{\n                if (regex.test(key)) {\n                    keys.add(key);\n                }\n            });\n            return Array.from(keys);\n        } catch (error) {\n            console.error(\"[Database] Keys error:\", error);\n            return [];\n        }\n    }\n    /**\n   * Increment a counter\n   */ async increment(key, by = 1) {\n        try {\n            // Try KV first\n            if (this.isKVAvailable) {\n                try {\n                    return await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.incr(key);\n                } catch (error) {\n                    console.warn(\"[Database] KV increment error:\", error);\n                }\n            }\n            // Try Redis\n            if (this.isRedisAvailable) {\n                try {\n                    const Redis = __webpack_require__(/*! ioredis */ \"ioredis\");\n                    const redis = new Redis({\n                        host: new URL(process.env.UPSTASH_REDIS_REST_URL).hostname,\n                        port: parseInt(new URL(process.env.UPSTASH_REDIS_REST_URL).port) || 6379,\n                        password: process.env.UPSTASH_REDIS_REST_TOKEN,\n                        tls: {}\n                    });\n                    const result = await redis.incrby(key, by);\n                    await redis.quit();\n                    return result;\n                } catch (error) {\n                    console.warn(\"[Database] Redis increment error:\", error);\n                }\n            }\n            // Fallback to memory cache\n            const current = this.memoryCache.get(key) || 0;\n            const newValue = current + by;\n            this.memoryCache.set(key, newValue);\n            return newValue;\n        } catch (error) {\n            console.error(\"[Database] Increment error:\", error);\n            return 0;\n        }\n    }\n    /**\n   * Set with expiration\n   */ async setex(key, seconds, value) {\n        return this.set(key, value, seconds);\n    }\n    /**\n   * Hash operations for complex data structures\n   */ async hset(key, field, value) {\n        try {\n            const hash = await this.get(key) || {};\n            hash[field] = value;\n            return this.set(key, hash);\n        } catch (error) {\n            console.error(\"[Database] Hash set error:\", error);\n            return false;\n        }\n    }\n    async hget(key, field) {\n        try {\n            const hash = await this.get(key);\n            return hash ? hash[field] : null;\n        } catch (error) {\n            console.error(\"[Database] Hash get error:\", error);\n            return null;\n        }\n    }\n    async hgetall(key) {\n        try {\n            return await this.get(key);\n        } catch (error) {\n            console.error(\"[Database] Hash get all error:\", error);\n            return null;\n        }\n    }\n    /**\n   * List operations\n   */ async lpush(key, value) {\n        try {\n            const list = await this.get(key) || [];\n            list.unshift(value);\n            await this.set(key, list);\n            return list.length;\n        } catch (error) {\n            console.error(\"[Database] List push error:\", error);\n            return 0;\n        }\n    }\n    async lrange(key, start, stop) {\n        try {\n            const list = await this.get(key) || [];\n            return list.slice(start, stop === -1 ? undefined : stop + 1);\n        } catch (error) {\n            console.error(\"[Database] List range error:\", error);\n            return [];\n        }\n    }\n    /**\n   * Configuration-specific methods\n   */ async getConfiguration(key) {\n        return this.get(`config:${key}`);\n    }\n    async setConfiguration(config) {\n        return this.set(`config:${config.key}`, config);\n    }\n    async getAllConfigurations() {\n        try {\n            const keys = await this.keys(\"config:*\");\n            const configs = [];\n            for (const key of keys){\n                const config = await this.get(key);\n                if (config) {\n                    configs.push(config);\n                }\n            }\n            return configs;\n        } catch (error) {\n            console.error(\"[Database] Get all configurations error:\", error);\n            return [];\n        }\n    }\n    async getProfile(id) {\n        return this.get(`profile:${id}`);\n    }\n    async setProfile(profile) {\n        return this.set(`profile:${profile.id}`, profile);\n    }\n    async getAllProfiles() {\n        try {\n            const keys = await this.keys(\"profile:*\");\n            const profiles = [];\n            for (const key of keys){\n                const profile = await this.get(key);\n                if (profile) {\n                    profiles.push(profile);\n                }\n            }\n            return profiles;\n        } catch (error) {\n            console.error(\"[Database] Get all profiles error:\", error);\n            return [];\n        }\n    }\n    /**\n   * Health check\n   */ async healthCheck() {\n        const details = {\n            memory: true,\n            kv: false,\n            redis: false\n        };\n        let healthyCount = 1; // Memory is always available\n        // Test KV\n        if (this.isKVAvailable) {\n            try {\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.set(\"health_check\", Date.now());\n                await _vercel_kv__WEBPACK_IMPORTED_MODULE_0__.kv.get(\"health_check\");\n                details.kv = true;\n                healthyCount++;\n            } catch (error) {\n                details.kvError = error instanceof Error ? error.message : \"Unknown error\";\n            }\n        }\n        // Test Redis\n        if (this.isRedisAvailable) {\n            try {\n                const Redis = __webpack_require__(/*! ioredis */ \"ioredis\");\n                const redis = new Redis({\n                    host: new URL(process.env.UPSTASH_REDIS_REST_URL).hostname,\n                    port: parseInt(new URL(process.env.UPSTASH_REDIS_REST_URL).port) || 6379,\n                    password: process.env.UPSTASH_REDIS_REST_TOKEN,\n                    tls: {}\n                });\n                await redis.set(\"health_check\", Date.now());\n                await redis.get(\"health_check\");\n                await redis.quit();\n                details.redis = true;\n                healthyCount++;\n            } catch (error) {\n                details.redisError = error instanceof Error ? error.message : \"Unknown error\";\n            }\n        }\n        const totalServices = 1 + (this.isKVAvailable ? 1 : 0) + (this.isRedisAvailable ? 1 : 0);\n        const status = healthyCount === totalServices ? \"healthy\" : healthyCount > 0 ? \"degraded\" : \"unhealthy\";\n        return {\n            status,\n            details\n        };\n    }\n}\nconst database = DatabaseService.getInstance();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (database);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/database.ts\n");

/***/ }),

/***/ "(api)/./lib/rate-engine.ts":
/*!****************************!*\
  !*** ./lib/rate-engine.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RateEngine: () => (/* binding */ RateEngine),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   rateEngine: () => (/* binding */ rateEngine)\n/* harmony export */ });\n/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./database */ \"(api)/./lib/database.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_database__WEBPACK_IMPORTED_MODULE_0__]);\n_database__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/**\n * Rate Engine - Core rate calculation and management system\n * Handles real-time rate calculations, spread management, and threshold monitoring\n */ \nclass RateEngine {\n    constructor(){\n        this.isRunning = false;\n        this.rates = new Map();\n        this.thresholds = new Map();\n        this.alerts = [];\n        this.lastUpdate = 0;\n        this.sources = new Set([\n            \"polygon\",\n            \"twelvedata\",\n            \"coinbase\"\n        ]);\n        this.subscribers = new Set();\n        this.config = {\n            defaultSpread: 0.02,\n            minSpread: 0.005,\n            maxSpread: 0.1,\n            volatilityFactor: 0.1,\n            liquidityFactor: 0.05,\n            updateFrequency: 30000\n        };\n    }\n    static getInstance() {\n        if (!RateEngine.instance) {\n            RateEngine.instance = new RateEngine();\n        }\n        return RateEngine.instance;\n    }\n    /**\n   * Start the rate engine\n   */ async start() {\n        if (this.isRunning) {\n            console.log(\"[RateEngine] Already running\");\n            return;\n        }\n        console.log(\"[RateEngine] Starting rate engine...\");\n        try {\n            // Load existing rates and thresholds from database\n            await this.loadConfiguration();\n            // Start update cycle\n            this.updateInterval = setInterval(()=>{\n                this.updateRates().catch((error)=>{\n                    console.error(\"[RateEngine] Update cycle error:\", error);\n                });\n            }, this.config.updateFrequency);\n            // Initial update\n            await this.updateRates();\n            this.isRunning = true;\n            console.log(\"[RateEngine] Started successfully\");\n        } catch (error) {\n            console.error(\"[RateEngine] Failed to start:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Stop the rate engine\n   */ stop() {\n        if (!this.isRunning) {\n            return;\n        }\n        console.log(\"[RateEngine] Stopping rate engine...\");\n        if (this.updateInterval) {\n            clearInterval(this.updateInterval);\n            this.updateInterval = undefined;\n        }\n        this.isRunning = false;\n        console.log(\"[RateEngine] Stopped\");\n    }\n    /**\n   * Load configuration from database\n   */ async loadConfiguration() {\n        try {\n            // Load existing rates\n            const ratesData = await _database__WEBPACK_IMPORTED_MODULE_0__.database.get(\"rates:all\");\n            if (ratesData) {\n                const rates = JSON.parse(ratesData);\n                rates.forEach((rate)=>{\n                    this.rates.set(rate.baseCurrency + rate.targetCurrency, rate);\n                });\n            }\n            // Load thresholds\n            const thresholdsData = await _database__WEBPACK_IMPORTED_MODULE_0__.database.get(\"thresholds:all\");\n            if (thresholdsData) {\n                const thresholds = JSON.parse(thresholdsData);\n                thresholds.forEach((threshold)=>{\n                    this.thresholds.set(threshold.currencyPair, threshold);\n                });\n            }\n            // Load config\n            const configData = await _database__WEBPACK_IMPORTED_MODULE_0__.database.get(\"rate_engine:config\");\n            if (configData) {\n                this.config = {\n                    ...this.config,\n                    ...JSON.parse(configData)\n                };\n            }\n        } catch (error) {\n            console.error(\"[RateEngine] Error loading configuration:\", error);\n        }\n    }\n    /**\n   * Save configuration to database\n   */ async saveConfiguration() {\n        try {\n            const rates = Array.from(this.rates.values());\n            const thresholds = Array.from(this.thresholds.values());\n            await Promise.all([\n                _database__WEBPACK_IMPORTED_MODULE_0__.database.setex(\"rates:all\", 3600, JSON.stringify(rates)),\n                _database__WEBPACK_IMPORTED_MODULE_0__.database.setex(\"thresholds:all\", 3600, JSON.stringify(thresholds)),\n                _database__WEBPACK_IMPORTED_MODULE_0__.database.setex(\"rate_engine:config\", 3600, JSON.stringify(this.config))\n            ]);\n        } catch (error) {\n            console.error(\"[RateEngine] Error saving configuration:\", error);\n        }\n    }\n    /**\n   * Update all rates from market data\n   */ async updateRates() {\n        const startTime = Date.now();\n        try {\n            console.log(\"[RateEngine] Updating rates...\");\n            // Get market data for all tracked currency pairs\n            const currencyPairs = this.getCurrencyPairs();\n            for (const pair of currencyPairs){\n                await this.updateRateForPair(pair);\n            }\n            // Save updated rates\n            await this.saveConfiguration();\n            // Check thresholds and generate alerts\n            this.checkThresholds();\n            this.lastUpdate = Date.now();\n            const duration = this.lastUpdate - startTime;\n            console.log(`[RateEngine] Updated ${currencyPairs.length} rates in ${duration}ms`);\n        } catch (error) {\n            console.error(\"[RateEngine] Error updating rates:\", error);\n        }\n    }\n    /**\n   * Update rate for a specific currency pair\n   */ async updateRateForPair(pair) {\n        try {\n            const [base, target] = pair.split(\"/\");\n            // Get market data for this pair\n            const marketData = await this.getMarketData(base, target);\n            if (!marketData) {\n                console.warn(`[RateEngine] No market data for ${pair}`);\n                return;\n            }\n            // Calculate rate with spread\n            const rate = this.calculateRateWithSpread(marketData, pair);\n            // Update rate in memory\n            this.rates.set(pair.replace(\"/\", \"\"), rate);\n            // Cache individual rate\n            await _database__WEBPACK_IMPORTED_MODULE_0__.database.setex(`rate:${pair.replace(\"/\", \"\")}`, 60, JSON.stringify(rate));\n        } catch (error) {\n            console.error(`[RateEngine] Error updating rate for ${pair}:`, error);\n        }\n    }\n    /**\n   * Get market data for currency pair\n   */ async getMarketData(base, target) {\n        try {\n            // Try different sources\n            for (const source of this.sources){\n                const data = await this.fetchFromSource(source, base, target);\n                if (data) {\n                    return data;\n                }\n            }\n            return null;\n        } catch (error) {\n            console.error(`[RateEngine] Error getting market data for ${base}/${target}:`, error);\n            return null;\n        }\n    }\n    /**\n   * Fetch data from specific source\n   */ async fetchFromSource(source, base, target) {\n        try {\n            switch(source){\n                case \"coinbase\":\n                    return await this.fetchCoinbaseData(base, target);\n                case \"polygon\":\n                    return await this.fetchPolygonData(base, target);\n                case \"twelvedata\":\n                    return await this.fetchTwelveDataData(base, target);\n                default:\n                    return null;\n            }\n        } catch (error) {\n            console.error(`[RateEngine] Error fetching from ${source}:`, error);\n            return null;\n        }\n    }\n    /**\n   * Fetch Coinbase data\n   */ async fetchCoinbaseData(base, target) {\n        try {\n            const pair = `${base}-${target}`;\n            const response = await fetch(`https://api.exchange.coinbase.com/products/${pair}/ticker`);\n            if (!response.ok) {\n                return null;\n            }\n            const data = await response.json();\n            return {\n                symbol: pair,\n                price: parseFloat(data.price),\n                timestamp: Date.now(),\n                bid: parseFloat(data.bid),\n                ask: parseFloat(data.ask),\n                volume: parseFloat(data.volume),\n                source: \"coinbase\"\n            };\n        } catch (error) {\n            return null;\n        }\n    }\n    /**\n   * Fetch Polygon data\n   */ async fetchPolygonData(base, target) {\n        // Implementation for Polygon API\n        // This would require API key from environment\n        return null;\n    }\n    /**\n   * Fetch TwelveData data\n   */ async fetchTwelveDataData(base, target) {\n        // Implementation for TwelveData API\n        // This would require API key from environment\n        return null;\n    }\n    /**\n   * Calculate rate with spread\n   */ calculateRateWithSpread(marketData, pair) {\n        const threshold = this.thresholds.get(pair);\n        const baseSpread = threshold ? (threshold.minSpread + threshold.maxSpread) / 2 : this.config.defaultSpread;\n        // Calculate volatility-adjusted spread\n        const volatilitySpread = this.calculateVolatilitySpread(marketData);\n        const finalSpread = Math.max(Math.min(baseSpread + volatilitySpread, this.config.maxSpread), this.config.minSpread);\n        const buyRate = marketData.price * (1 + finalSpread / 2);\n        const sellRate = marketData.price * (1 - finalSpread / 2);\n        return {\n            id: `${pair}_${Date.now()}`,\n            baseCurrency: pair.split(\"/\")[0] || pair.slice(0, 3),\n            targetCurrency: pair.split(\"/\")[1] || pair.slice(3),\n            rate: marketData.price,\n            spread: finalSpread,\n            buyRate,\n            sellRate,\n            timestamp: marketData.timestamp,\n            source: \"calculated\",\n            isActive: true,\n            lastUpdated: Date.now()\n        };\n    }\n    /**\n   * Calculate volatility-based spread adjustment\n   */ calculateVolatilitySpread(marketData) {\n        if (!marketData.changePercent24h) {\n            return 0;\n        }\n        const volatility = Math.abs(marketData.changePercent24h / 100);\n        return volatility * this.config.volatilityFactor;\n    }\n    /**\n   * Check thresholds and generate alerts\n   */ checkThresholds() {\n        for (const [pair, threshold] of this.thresholds){\n            const rate = this.rates.get(pair.replace(\"/\", \"\"));\n            if (!rate) continue;\n            // Check spread thresholds\n            if (rate.spread < threshold.minSpread || rate.spread > threshold.maxSpread) {\n                this.generateAlert({\n                    id: `alert_${Date.now()}_${pair}`,\n                    currencyPair: pair,\n                    alertType: \"threshold_breach\",\n                    message: `Spread ${(rate.spread * 100).toFixed(2)}% outside threshold range ${(threshold.minSpread * 100).toFixed(2)}%-${(threshold.maxSpread * 100).toFixed(2)}%`,\n                    severity: \"medium\",\n                    timestamp: Date.now(),\n                    acknowledged: false\n                });\n            }\n            // Check rate freshness\n            const ageMinutes = (Date.now() - rate.lastUpdated) / (1000 * 60);\n            if (ageMinutes > 5) {\n                this.generateAlert({\n                    id: `alert_${Date.now()}_stale_${pair}`,\n                    currencyPair: pair,\n                    alertType: \"rate_stale\",\n                    message: `Rate for ${pair} is ${ageMinutes.toFixed(1)} minutes old`,\n                    severity: ageMinutes > 15 ? \"high\" : \"medium\",\n                    timestamp: Date.now(),\n                    acknowledged: false\n                });\n            }\n        }\n    }\n    /**\n   * Generate alert\n   */ generateAlert(alert) {\n        this.alerts.push(alert);\n        console.warn(`[RateEngine] Alert: ${alert.message}`);\n        // Keep only last 100 alerts\n        if (this.alerts.length > 100) {\n            this.alerts = this.alerts.slice(-100);\n        }\n    }\n    /**\n   * Get all currency pairs being tracked\n   */ getCurrencyPairs() {\n        // Default pairs - this could be configurable\n        return [\n            \"USD/CAD\",\n            \"EUR/USD\",\n            \"GBP/USD\",\n            \"USD/JPY\",\n            \"AUD/USD\",\n            \"USD/CHF\",\n            \"BTC/USD\",\n            \"ETH/USD\",\n            \"BTC/CAD\",\n            \"ETH/CAD\"\n        ];\n    }\n    // Public API methods\n    /**\n   * Get current rate for currency pair\n   */ getRate(currencyPair) {\n        return this.rates.get(currencyPair.replace(\"/\", \"\")) || null;\n    }\n    /**\n   * Get all current rates\n   */ getAllRates() {\n        return Array.from(this.rates.values());\n    }\n    /**\n   * Update rate manually (for store owners)\n   */ async updateRateManually(request) {\n        const pair = request.currencyPair.replace(\"/\", \"\");\n        const existingRate = this.rates.get(pair);\n        if (!existingRate) {\n            throw new Error(`Rate not found for ${request.currencyPair}`);\n        }\n        const updatedRate = {\n            ...existingRate,\n            spread: request.spread || existingRate.spread,\n            buyRate: request.buyRate || existingRate.buyRate,\n            sellRate: request.sellRate || existingRate.sellRate,\n            source: request.source,\n            lastUpdated: Date.now(),\n            storeId: request.storeId\n        };\n        // Validate the manual rate\n        if (updatedRate.spread < this.config.minSpread || updatedRate.spread > this.config.maxSpread) {\n            throw new Error(`Spread ${(updatedRate.spread * 100).toFixed(2)}% outside allowed range ${(this.config.minSpread * 100).toFixed(2)}%-${(this.config.maxSpread * 100).toFixed(2)}%`);\n        }\n        this.rates.set(pair, updatedRate);\n        // Save to database\n        await _database__WEBPACK_IMPORTED_MODULE_0__.database.setex(`rate:${pair}`, 3600, JSON.stringify(updatedRate));\n        return updatedRate;\n    }\n    /**\n   * Add rate threshold\n   */ async addThreshold(threshold) {\n        this.thresholds.set(threshold.currencyPair, threshold);\n        await this.saveConfiguration();\n    }\n    /**\n   * Get engine status\n   */ getStatus() {\n        return {\n            isRunning: this.isRunning,\n            lastUpdate: this.lastUpdate,\n            activeSources: Array.from(this.sources),\n            activeSubscriptions: this.subscribers.size,\n            rateCount: this.rates.size,\n            alertCount: this.alerts.length,\n            lockCount: 0,\n            performance: {\n                avgUpdateTime: 0,\n                maxUpdateTime: 0,\n                errorRate: 0\n            }\n        };\n    }\n    /**\n   * Subscribe to rate updates\n   */ subscribe(clientId) {\n        this.subscribers.add(clientId);\n    }\n    /**\n   * Unsubscribe from rate updates\n   */ unsubscribe(clientId) {\n        this.subscribers.delete(clientId);\n    }\n    /**\n   * Get recent alerts\n   */ getAlerts(limit = 50) {\n        return this.alerts.slice(-limit);\n    }\n}\nconst rateEngine = RateEngine.getInstance();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (rateEngine);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/rate-engine.ts\n");

/***/ }),

/***/ "(api)/./lib/rate-limiter.ts":
/*!*****************************!*\
  !*** ./lib/rate-limiter.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RateLimitService: () => (/* binding */ RateLimitService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   rateLimiter: () => (/* binding */ rateLimiter)\n/* harmony export */ });\n/* harmony import */ var rate_limiter_flexible__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rate-limiter-flexible */ \"rate-limiter-flexible\");\n/* harmony import */ var rate_limiter_flexible__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rate_limiter_flexible__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _security__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./security */ \"(api)/./lib/security.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_security__WEBPACK_IMPORTED_MODULE_1__]);\n_security__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/**\n * Rate Limiting Service for LeaperFX Backend API\n */ \n\nclass RateLimitService {\n    constructor(){\n        this.limiters = new Map();\n        this.isRedisAvailable = !!(process.env.UPSTASH_REDIS_REST_URL && process.env.UPSTASH_REDIS_REST_TOKEN);\n        this.initializeDefaultLimiters();\n    }\n    static getInstance() {\n        if (!RateLimitService.instance) {\n            RateLimitService.instance = new RateLimitService();\n        }\n        return RateLimitService.instance;\n    }\n    initializeDefaultLimiters() {\n        // API endpoints rate limiting\n        this.createLimiter(\"api\", {\n            windowMs: 60000,\n            maxRequests: parseInt(process.env.RATE_LIMIT_REQUESTS || \"1000\")\n        });\n        // Data endpoints (more restrictive)\n        this.createLimiter(\"data\", {\n            windowMs: 60000,\n            maxRequests: 500\n        });\n        // Configuration endpoints (very restrictive)\n        this.createLimiter(\"config\", {\n            windowMs: 60000,\n            maxRequests: 100\n        });\n        // Health check (generous)\n        this.createLimiter(\"health\", {\n            windowMs: 60000,\n            maxRequests: 60\n        });\n        // Authentication (strict)\n        this.createLimiter(\"auth\", {\n            windowMs: 300000,\n            maxRequests: 20\n        });\n        // WebSocket connections\n        this.createLimiter(\"ws\", {\n            windowMs: 300000,\n            maxRequests: 10\n        });\n        // Rate management endpoints (moderate limits for store operations)\n        this.createLimiter(\"rates\", {\n            windowMs: 60000,\n            maxRequests: 200\n        });\n        // Market data endpoints (generous for real-time needs)\n        this.createLimiter(\"market_data\", {\n            windowMs: 60000,\n            maxRequests: 1000\n        });\n    }\n    createLimiter(name, config) {\n        const options = {\n            keyPrefix: `rl_${name}`,\n            points: config.maxRequests,\n            duration: Math.floor(config.windowMs / 1000),\n            blockDuration: Math.floor(config.windowMs / 1000),\n            skipSuccessfulRequests: config.skipSuccessfulRequests || false,\n            skipFailedRequests: config.skipFailedRequests || false\n        };\n        let limiter;\n        if (this.isRedisAvailable) {\n            try {\n                limiter = new rate_limiter_flexible__WEBPACK_IMPORTED_MODULE_0__.RateLimiterRedis({\n                    ...options,\n                    storeClient: this.getRedisClient()\n                });\n            } catch (error) {\n                console.warn(`[RateLimit] Redis unavailable for ${name}, falling back to memory:`, error);\n                limiter = new rate_limiter_flexible__WEBPACK_IMPORTED_MODULE_0__.RateLimiterMemory(options);\n            }\n        } else {\n            limiter = new rate_limiter_flexible__WEBPACK_IMPORTED_MODULE_0__.RateLimiterMemory(options);\n        }\n        this.limiters.set(name, limiter);\n    }\n    getRedisClient() {\n        // For Vercel KV or Upstash Redis\n        const Redis = __webpack_require__(/*! ioredis */ \"ioredis\");\n        if (process.env.KV_URL) {\n            return new Redis(process.env.KV_URL);\n        }\n        if (process.env.UPSTASH_REDIS_REST_URL) {\n            return new Redis({\n                host: new URL(process.env.UPSTASH_REDIS_REST_URL).hostname,\n                port: parseInt(new URL(process.env.UPSTASH_REDIS_REST_URL).port) || 6379,\n                password: process.env.UPSTASH_REDIS_REST_TOKEN,\n                tls: {}\n            });\n        }\n        throw new Error(\"No Redis configuration found\");\n    }\n    /**\n   * Check rate limit for a request\n   */ async checkRateLimit(req, category = \"api\") {\n        const limiter = this.limiters.get(category);\n        if (!limiter) {\n            throw new Error(`Rate limiter not found for category: ${category}`);\n        }\n        const key = _security__WEBPACK_IMPORTED_MODULE_1__.security.getRateLimitKey(req, category);\n        try {\n            const result = await limiter.consume(key);\n            return {\n                limit: limiter.points,\n                remaining: result.remainingPoints || 0,\n                reset: Date.now() + (result.msBeforeNext || 0)\n            };\n        } catch (rateLimiterResult) {\n            // Rate limit exceeded\n            return {\n                limit: limiter.points,\n                remaining: 0,\n                reset: Date.now() + (rateLimiterResult.msBeforeNext || 0),\n                retryAfter: Math.round((rateLimiterResult.msBeforeNext || 0) / 1000)\n            };\n        }\n    }\n    /**\n   * Apply rate limiting to API response\n   */ async applyRateLimit(req, res, category = \"api\") {\n        try {\n            const rateLimitInfo = await this.checkRateLimit(req, category);\n            // Set rate limit headers\n            res.setHeader(\"X-RateLimit-Limit\", rateLimitInfo.limit.toString());\n            res.setHeader(\"X-RateLimit-Remaining\", rateLimitInfo.remaining.toString());\n            res.setHeader(\"X-RateLimit-Reset\", rateLimitInfo.reset.toString());\n            if (rateLimitInfo.retryAfter) {\n                res.setHeader(\"Retry-After\", rateLimitInfo.retryAfter.toString());\n                res.status(429).json({\n                    success: false,\n                    error: \"Rate limit exceeded\",\n                    code: \"RATE_LIMIT_EXCEEDED\",\n                    retryAfter: rateLimitInfo.retryAfter,\n                    timestamp: Date.now(),\n                    requestId: _security__WEBPACK_IMPORTED_MODULE_1__.security.generateRequestId()\n                });\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"[RateLimit] Error applying rate limit:\", error);\n            // On error, allow the request to proceed\n            return true;\n        }\n    }\n    /**\n   * Get rate limit status without consuming\n   */ async getRateLimitStatus(req, category = \"api\") {\n        const limiter = this.limiters.get(category);\n        if (!limiter) {\n            throw new Error(`Rate limiter not found for category: ${category}`);\n        }\n        const key = _security__WEBPACK_IMPORTED_MODULE_1__.security.getRateLimitKey(req, category);\n        try {\n            const result = await limiter.get(key);\n            return {\n                limit: limiter.points,\n                remaining: result ? result.remainingPoints : limiter.points,\n                reset: Date.now() + (result ? result.msBeforeNext : 0)\n            };\n        } catch (error) {\n            console.error(\"[RateLimit] Error getting status:\", error);\n            return {\n                limit: limiter.points,\n                remaining: limiter.points,\n                reset: Date.now() + 60000\n            };\n        }\n    }\n    /**\n   * Reset rate limit for a key\n   */ async resetRateLimit(req, category = \"api\") {\n        const limiter = this.limiters.get(category);\n        if (!limiter) {\n            throw new Error(`Rate limiter not found for category: ${category}`);\n        }\n        const key = _security__WEBPACK_IMPORTED_MODULE_1__.security.getRateLimitKey(req, category);\n        await limiter.delete(key);\n    }\n    /**\n   * Create custom rate limiter\n   */ createCustomLimiter(name, config) {\n        this.createLimiter(name, config);\n    }\n    /**\n   * Get all active limiters\n   */ getLimiters() {\n        return Array.from(this.limiters.keys());\n    }\n    /**\n   * Middleware function for easy integration\n   */ middleware(category = \"api\") {\n        return async (req, res, next)=>{\n            const canProceed = await this.applyRateLimit(req, res, category);\n            if (canProceed && next) {\n                next();\n            }\n            return canProceed;\n        };\n    }\n    /**\n   * Rate limit based on IP address only (for public endpoints)\n   */ async checkIPRateLimit(req, config) {\n        const ip = _security__WEBPACK_IMPORTED_MODULE_1__.security.getClientIP(req);\n        const key = `ip_rl:${ip}`;\n        const limiter = new rate_limiter_flexible__WEBPACK_IMPORTED_MODULE_0__.RateLimiterMemory({\n            keyPrefix: \"ip_rate_limit\",\n            points: config.maxRequests,\n            duration: Math.floor(config.windowMs / 1000),\n            blockDuration: Math.floor(config.windowMs / 1000)\n        });\n        try {\n            const result = await limiter.consume(key);\n            return {\n                limit: config.maxRequests,\n                remaining: result.remainingPoints || 0,\n                reset: Date.now() + (result.msBeforeNext || 0)\n            };\n        } catch (rateLimiterResult) {\n            return {\n                limit: config.maxRequests,\n                remaining: 0,\n                reset: Date.now() + (rateLimiterResult.msBeforeNext || 0),\n                retryAfter: Math.round((rateLimiterResult.msBeforeNext || 0) / 1000)\n            };\n        }\n    }\n}\nconst rateLimiter = RateLimitService.getInstance();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (rateLimiter);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/rate-limiter.ts\n");

/***/ }),

/***/ "(api)/./lib/security.ts":
/*!*************************!*\
  !*** ./lib/security.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SecurityService: () => (/* binding */ SecurityService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   security: () => (/* binding */ security)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"uuid\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([uuid__WEBPACK_IMPORTED_MODULE_0__]);\nuuid__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/**\n * Security utilities for LeaperFX Backend API\n */ \nclass SecurityService {\n    constructor(){\n        this.secretKey = process.env.API_SECRET_KEY || \"fallback-dev-key-change-in-production\";\n    }\n    static getInstance() {\n        if (!SecurityService.instance) {\n            SecurityService.instance = new SecurityService();\n        }\n        return SecurityService.instance;\n    }\n    /**\n   * Generate a unique request ID\n   */ generateRequestId() {\n        return (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)();\n    }\n    /**\n   * Extract client IP address from request\n   */ getClientIP(req) {\n        const forwarded = req.headers[\"x-forwarded-for\"];\n        const realIP = req.headers[\"x-real-ip\"];\n        const cfConnectingIP = req.headers[\"cf-connecting-ip\"];\n        if (typeof forwarded === \"string\") {\n            return forwarded.split(\",\")[0].trim();\n        }\n        if (typeof realIP === \"string\") {\n            return realIP;\n        }\n        if (typeof cfConnectingIP === \"string\") {\n            return cfConnectingIP;\n        }\n        return req.socket.remoteAddress || \"unknown\";\n    }\n    /**\n   * Create security context for request\n   */ createSecurityContext(req) {\n        return {\n            requestId: this.generateRequestId(),\n            clientId: req.headers[\"x-client-id\"],\n            ipAddress: this.getClientIP(req),\n            userAgent: req.headers[\"user-agent\"] || \"unknown\",\n            timestamp: Date.now(),\n            rateLimitInfo: {\n                limit: 1000,\n                remaining: 999,\n                reset: Date.now() + 60000\n            }\n        };\n    }\n    /**\n   * Validate API key from headers\n   */ validateApiKey(req) {\n        const apiKey = req.headers[\"x-api-key\"] || req.headers[\"authorization\"]?.replace(\"Bearer \", \"\");\n        // In development, allow requests without API key\n        if ( true && !apiKey) {\n            return true;\n        }\n        // For production, implement proper API key validation\n        if (!apiKey) {\n            return false;\n        }\n        // Simple validation - replace with proper JWT or API key system\n        return apiKey === this.secretKey || apiKey === process.env.API_SECRET_KEY;\n    }\n    /**\n   * Sanitize input to prevent XSS and injection attacks\n   */ sanitizeInput(input) {\n        if (typeof input === \"string\") {\n            return input.replace(/[<>]/g, \"\").replace(/javascript:/gi, \"\").replace(/on\\w+=/gi, \"\").trim();\n        }\n        if (Array.isArray(input)) {\n            return input.map((item)=>this.sanitizeInput(item));\n        }\n        if (typeof input === \"object\" && input !== null) {\n            const sanitized = {};\n            for (const [key, value] of Object.entries(input)){\n                sanitized[this.sanitizeInput(key)] = this.sanitizeInput(value);\n            }\n            return sanitized;\n        }\n        return input;\n    }\n    /**\n   * Validate request parameters\n   */ validateRequest(req, schema) {\n        const errors = [];\n        const data = {\n            ...req.query,\n            ...req.body\n        };\n        for (const [field, rules] of Object.entries(schema)){\n            const value = data[field];\n            const fieldRules = rules;\n            if (fieldRules.required && (value === undefined || value === null || value === \"\")) {\n                errors.push({\n                    field,\n                    message: `${field} is required`,\n                    value\n                });\n                continue;\n            }\n            if (value !== undefined && fieldRules.type) {\n                const actualType = Array.isArray(value) ? \"array\" : typeof value;\n                if (actualType !== fieldRules.type) {\n                    errors.push({\n                        field,\n                        message: `${field} must be of type ${fieldRules.type}`,\n                        value\n                    });\n                }\n            }\n            if (fieldRules.minLength && typeof value === \"string\" && value.length < fieldRules.minLength) {\n                errors.push({\n                    field,\n                    message: `${field} must be at least ${fieldRules.minLength} characters`,\n                    value\n                });\n            }\n            if (fieldRules.maxLength && typeof value === \"string\" && value.length > fieldRules.maxLength) {\n                errors.push({\n                    field,\n                    message: `${field} must be no more than ${fieldRules.maxLength} characters`,\n                    value\n                });\n            }\n            if (fieldRules.pattern && typeof value === \"string\" && !fieldRules.pattern.test(value)) {\n                errors.push({\n                    field,\n                    message: `${field} format is invalid`,\n                    value\n                });\n            }\n            if (fieldRules.enum && !fieldRules.enum.includes(value)) {\n                errors.push({\n                    field,\n                    message: `${field} must be one of: ${fieldRules.enum.join(\", \")}`,\n                    value\n                });\n            }\n        }\n        return errors;\n    }\n    /**\n   * Set security headers\n   */ setSecurityHeaders(res) {\n        res.setHeader(\"X-Content-Type-Options\", \"nosniff\");\n        res.setHeader(\"X-Frame-Options\", \"DENY\");\n        res.setHeader(\"X-XSS-Protection\", \"1; mode=block\");\n        res.setHeader(\"Referrer-Policy\", \"strict-origin-when-cross-origin\");\n        res.setHeader(\"Content-Security-Policy\", \"default-src 'self'\");\n        if (false) {}\n    }\n    /**\n   * Check if request is from allowed origin\n   */ isOriginAllowed(origin) {\n        if (!origin) return true; // Allow same-origin requests\n        const allowedOrigins = [\n            \"http://localhost:3000\",\n            \"http://localhost:5173\",\n            \"https://leaperfx-dashboard.vercel.app\",\n            process.env.CORS_ORIGIN\n        ].filter(Boolean);\n        return allowedOrigins.includes(origin);\n    }\n    /**\n   * Generate CORS headers\n   */ getCorsHeaders(origin) {\n        const isAllowed = this.isOriginAllowed(origin);\n        return {\n            \"Access-Control-Allow-Origin\": isAllowed ? origin || \"*\" : \"null\",\n            \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n            \"Access-Control-Allow-Headers\": \"Content-Type, Authorization, X-API-Key, X-Request-ID, X-Client-ID\",\n            \"Access-Control-Max-Age\": \"86400\",\n            \"Vary\": \"Origin\"\n        };\n    }\n    /**\n   * Rate limiting key generation\n   */ getRateLimitKey(req, prefix = \"rl\") {\n        const ip = this.getClientIP(req);\n        const apiKey = req.headers[\"x-api-key\"] || \"anonymous\";\n        return `${prefix}:${ip}:${apiKey}`;\n    }\n    /**\n   * Check if request is suspicious\n   */ isSuspiciousRequest(req) {\n        const userAgent = req.headers[\"user-agent\"] || \"\";\n        const suspiciousPatterns = [\n            /bot/i,\n            /crawler/i,\n            /spider/i,\n            /scraper/i,\n            /curl/i,\n            /wget/i,\n            /python/i,\n            /postman/i\n        ];\n        // Allow legitimate crawlers and development tools\n        const allowedPatterns = [\n            /googlebot/i,\n            /bingbot/i,\n            /slackbot/i,\n            /facebookexternalhit/i,\n            /twitterbot/i,\n            /linkedinbot/i,\n            /chrome/i,\n            /firefox/i,\n            /safari/i,\n            /edge/i\n        ];\n        if (allowedPatterns.some((pattern)=>pattern.test(userAgent))) {\n            return false;\n        }\n        return suspiciousPatterns.some((pattern)=>pattern.test(userAgent));\n    }\n    /**\n   * Log security event\n   */ logSecurityEvent(event, context, details) {\n        const logEntry = {\n            timestamp: new Date().toISOString(),\n            event,\n            requestId: context.requestId,\n            ip: context.ipAddress,\n            userAgent: context.userAgent,\n            details\n        };\n        console.log(\"[SECURITY]\", JSON.stringify(logEntry));\n    }\n}\nconst security = SecurityService.getInstance();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (security);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/security.ts\n");

/***/ }),

/***/ "(api)/./pages/api/rates/current.ts":
/*!************************************!*\
  !*** ./pages/api/rates/current.ts ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get */ \"(api)/./pages/api/rates/get.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_get__WEBPACK_IMPORTED_MODULE_0__]);\n_get__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/**\n * Current Exchange Rates API Endpoint\n * Alias for get.ts - retrieves current exchange rates for frontend applications\n */ \n// Simple forwarding to the get endpoint\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_get__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvcmF0ZXMvY3VycmVudC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Q0FHQyxHQUcyQjtBQUU1Qix3Q0FBd0M7QUFDeEMsaUVBQWVBLDRDQUFPQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGxlYXBlcmZ4L2FwaS8uL3BhZ2VzL2FwaS9yYXRlcy9jdXJyZW50LnRzPzk0ZDgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDdXJyZW50IEV4Y2hhbmdlIFJhdGVzIEFQSSBFbmRwb2ludFxuICogQWxpYXMgZm9yIGdldC50cyAtIHJldHJpZXZlcyBjdXJyZW50IGV4Y2hhbmdlIHJhdGVzIGZvciBmcm9udGVuZCBhcHBsaWNhdGlvbnNcbiAqL1xuXG5pbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XG5pbXBvcnQgaGFuZGxlciBmcm9tICcuL2dldCc7XG5cbi8vIFNpbXBsZSBmb3J3YXJkaW5nIHRvIHRoZSBnZXQgZW5kcG9pbnRcbmV4cG9ydCBkZWZhdWx0IGhhbmRsZXI7Il0sIm5hbWVzIjpbImhhbmRsZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/rates/current.ts\n");

/***/ }),

/***/ "(api)/./pages/api/rates/get.ts":
/*!********************************!*\
  !*** ./pages/api/rates/get.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_security__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/security */ \"(api)/./lib/security.ts\");\n/* harmony import */ var _lib_rate_limiter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/rate-limiter */ \"(api)/./lib/rate-limiter.ts\");\n/* harmony import */ var _lib_rate_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/rate-engine */ \"(api)/./lib/rate-engine.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_security__WEBPACK_IMPORTED_MODULE_0__, _lib_rate_limiter__WEBPACK_IMPORTED_MODULE_1__, _lib_rate_engine__WEBPACK_IMPORTED_MODULE_2__]);\n([_lib_security__WEBPACK_IMPORTED_MODULE_0__, _lib_rate_limiter__WEBPACK_IMPORTED_MODULE_1__, _lib_rate_engine__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/**\n * Get Exchange Rates API Endpoint\n * Retrieve current exchange rates for store operations\n */ \n\n\nasync function handler(req, res) {\n    const securityContext = _lib_security__WEBPACK_IMPORTED_MODULE_0__.security.createSecurityContext(req);\n    // Set security headers\n    _lib_security__WEBPACK_IMPORTED_MODULE_0__.security.setSecurityHeaders(res);\n    // Set CORS headers\n    const corsHeaders = _lib_security__WEBPACK_IMPORTED_MODULE_0__.security.getCorsHeaders(req.headers.origin);\n    Object.entries(corsHeaders).forEach(([key, value])=>{\n        res.setHeader(key, value);\n    });\n    // Handle OPTIONS preflight\n    if (req.method === \"OPTIONS\") {\n        res.status(200).end();\n        return;\n    }\n    // Only allow GET requests\n    if (req.method !== \"GET\") {\n        res.status(405).json({\n            success: false,\n            error: \"Method not allowed\",\n            timestamp: Date.now(),\n            requestId: securityContext.requestId\n        });\n        return;\n    }\n    try {\n        // Apply rate limiting\n        const canProceed = await _lib_rate_limiter__WEBPACK_IMPORTED_MODULE_1__.rateLimiter.applyRateLimit(req, res, \"rates\");\n        if (!canProceed) return;\n        // Validate API access\n        if (!_lib_security__WEBPACK_IMPORTED_MODULE_0__.security.validateApiKey(req)) {\n            res.status(401).json({\n                success: false,\n                error: \"Invalid or missing API key\",\n                timestamp: Date.now(),\n                requestId: securityContext.requestId\n            });\n            return;\n        }\n        // Sanitize and validate input\n        const { pair, storeId, all } = _lib_security__WEBPACK_IMPORTED_MODULE_0__.security.sanitizeInput(req.query);\n        // Ensure rate engine is running\n        if (!_lib_rate_engine__WEBPACK_IMPORTED_MODULE_2__.rateEngine.getStatus().isRunning) {\n            await _lib_rate_engine__WEBPACK_IMPORTED_MODULE_2__.rateEngine.start();\n        }\n        // Handle single pair request\n        if (pair) {\n            const rate = _lib_rate_engine__WEBPACK_IMPORTED_MODULE_2__.rateEngine.getRate(pair);\n            if (!rate) {\n                res.status(404).json({\n                    success: false,\n                    error: `Exchange rate not found for ${pair}`,\n                    timestamp: Date.now(),\n                    requestId: securityContext.requestId\n                });\n                return;\n            }\n            // Filter by store if specified\n            if (storeId && rate.storeId && rate.storeId !== storeId) {\n                res.status(404).json({\n                    success: false,\n                    error: `Exchange rate not found for store ${storeId}`,\n                    timestamp: Date.now(),\n                    requestId: securityContext.requestId\n                });\n                return;\n            }\n            res.status(200).json({\n                success: true,\n                data: rate,\n                timestamp: Date.now(),\n                requestId: securityContext.requestId\n            });\n            return;\n        }\n        // Handle all rates request\n        let rates = _lib_rate_engine__WEBPACK_IMPORTED_MODULE_2__.rateEngine.getAllRates();\n        // Filter by store if specified\n        if (storeId) {\n            rates = rates.filter((rate)=>!rate.storeId || rate.storeId === storeId);\n        }\n        // Filter only active rates\n        rates = rates.filter((rate)=>rate.isActive);\n        // Sort by currency pair for consistent ordering\n        rates.sort((a, b)=>{\n            const pairA = `${a.baseCurrency}${a.targetCurrency}`;\n            const pairB = `${b.baseCurrency}${b.targetCurrency}`;\n            return pairA.localeCompare(pairB);\n        });\n        res.status(200).json({\n            success: true,\n            data: rates,\n            timestamp: Date.now(),\n            requestId: securityContext.requestId\n        });\n    } catch (error) {\n        console.error(\"[Rates] Get error:\", error);\n        res.status(500).json({\n            success: false,\n            error: \"Internal server error\",\n            timestamp: Date.now(),\n            requestId: securityContext.requestId\n        });\n    }\n}\nconst config = {\n    api: {\n        responseLimit: \"8mb\"\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/rates/get.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Frates%2Fcurrent&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Frates%2Fcurrent.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();